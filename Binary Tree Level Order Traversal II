/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
#include <Queue>
#include <vector>
#include <iostream>
using namespace std;

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result;
        if(!root){
            return result;
        }
        
        queue<TreeNode*> Q,T;
        Q.push(root);
        
        vector<int> level;
        level.push_back(root->val);
        result.push_back(level);
        level.clear();
        
        while(!Q.empty()){
            TreeNode *p=Q.front();
            Q.pop();
            if(p->left){
                T.push(p->left);
                level.push_back(p->left->val);
            }
            
            if(p->right){
                T.push(p->right);
                level.push_back(p->right->val);
            }
            
            if(Q.empty()){
                while(!T.empty()){
                    Q.push(T.front());
                    T.pop();
                }
                
                result.push_back(level);
                level.clear();
            }
        }
        
        result.erase(result.end()--);
        int depth=result.size();
        vector<int> temp;
        for(int i=0;i<depth/2;i++){
            temp.clear();
            temp.assign(result[i].begin(),result[i].end());
            
            result[i].clear();
            result[i].assign(result[depth-i-1].begin(),result[depth-i-1].end());
            
            result[depth-i-1].clear();
            result[depth-i-1].assign(temp.begin(),temp.end());
        }
        
        return result;
    }
};
