#include <vector>
#include <string>
#include <iostream>

using namespace std;
class Solution {
public:
    void breakString(string source, vector<string> &saveArr, string separator){
        saveArr.clear();
        std::string::size_type pos1=0,pos2=0;
        while(true){
            string subString;
            pos2=source.find(separator,pos1);
            if(pos2==std::string::npos){
                break;
            }
            
            for(std::string::size_type i=pos1;i<pos2;i++){
                subString+=source[i];
            }
            saveArr.push_back(subString);
            
            pos1=pos2+1;
        }
        
        string subString;
        for(std::string::size_type i=pos1;i<source.length();i++){
            subString+=source[i];
        }
        saveArr.push_back(subString);
        return;
    }
public:
    bool wordPattern(string pattern, string str) {
        vector<string> saveArr;
        string separator=" ";
        breakString(str,saveArr,separator);
        
        
        int len=pattern.length();
        if(len!=saveArr.size()){
            return false;
        }
        
        int* mark=new int[len];
        for(int i=0;i<len;i++){
            mark[i]=0;
        }
        
        for(int i=0;i<len;i++){
            if(mark[i]!=0){
                continue;
            }
            
            mark[i]=1;
            for(int j=i+1;j<len;j++){
                if(mark[j]==1){
                    continue;
                } 
                
                if(pattern[i]==pattern[j]){
                    mark[j]=1;
                    if(strcmp(saveArr[i].c_str(),saveArr[j].c_str())!=0){
                        return false;
                    }
                }
                else{
                    if(strcmp(saveArr[i].c_str(),saveArr[j].c_str())==0){
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
};
