class Solution {
public:
    void fastSort(vector<int>& nums, int left, int right){
        if (left>=right){
            return;
        }
        int pivot = nums[left];
        int i = left, j = right;
        while (i<j){
            while (nums[j]>=pivot && i<j){
                j--;
            }
            nums[i] = nums[j];
            while (nums[i]<=pivot && i<j){
                i++;
            }
            nums[j] = nums[i];
        }
        nums[i] = pivot;
        if (i != left){
            fastSort(nums, left, i - 1);
            fastSort(nums, i + 1, right);
        }
        else{
            fastSort(nums, left+1, right);
        }
    }
    
public:
    int findPairs(vector<int>& nums, int k) {
        int length=nums.size();
        fastSort(nums,0,length-1);
        
        int count=0;
        for(int i=0;i<length-1;i++){
            if(i>0 && (nums[i]==nums[i-1])){
                continue;
            }
            
            for(int j=i+1;j<length;j++){
                if(nums[j]-nums[i]==k){
                    count++;
                    cout<<"i="<<i<<", j="<<j<<endl;
                    break;
                }
            }
        }
        return count;
    }
};
