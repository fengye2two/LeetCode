#include <stack>
#include <vector>
class Solution {
public:
    bool calc(long int n){
        long int tempN;
        stack<int> s;
        tempN=n;
        
        while(tempN!=0){
            int k=tempN%10;
            s.push(k);
            tempN=tempN/10;
        }
        
        while(!s.empty()){
            tempN=tempN*10+s.top();
            s.pop();
        }
        
        
        if(tempN==n){
            return true;
        }
        else{
            return false;
        }
    }
public:
    int largestPalindrome(int n) {
        int largest=0;
        int smallest=1;
        for(int i=0;i<n;i++){
            largest=largest*10+9;
            smallest=smallest*10;
        }
        smallest=smallest/10;
        
        long int test,s1,s2,s3;
        bool isFind=false;
        map<long int, int> done;
        
        test=largest*largest;
        isFind=calc(test);
        if(isFind==true){
            return test%1337;
        }
        else{
            done.insert(pair<long int, int>(test,0));
        }
        
        for(long int i=largest-1;i>smallest;i--){
            s1=i*(i+1);
            s2=i*i;
            s3=(i+1)*(i-1);
            if(done.find(s1)==done.end()){
                isFind=calc(s1);
                if(isFind==true){
                    return i%1337;
                }
                else{
                    done.insert(pair<long int, int>(s1,0));
                }
            }
            
            if(done.find(s2)==done.end()){
                isFind=calc(s2);
                if(isFind==true){
                    return i%1337;
                }
                else{
                    done.insert(pair<long int, int>(s2,0));
                }
            }
            
            if(done.find(s3)==done.end()){
                isFind=calc(s3);
                if(isFind==true){
                    return i%1337;
                }
                else{
                    done.insert(pair<long int, int>(s3,0));
                }
            }
        }
        
    }
};
